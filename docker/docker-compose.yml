version: '3.8'

services:
  # TruCareer API Service
  api:
    build:
      context: ..
      dockerfile: docker/api/Dockerfile
    container_name: trucareer-api
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=production
      - MONGODB_URL=mongodb://mongodb:27017
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - mongodb
      - redis
    volumes:
      - ../logs:/app/logs
      - ../data:/app/data
    networks:
      - trucareer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: trucareer-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=trucareer
    volumes:
      - mongodb_data:/data/db
      - ../scripts/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - trucareer-network
    restart: unless-stopped

  # Redis Cache & Message Broker
  redis:
    image: redis:7.2-alpine
    container_name: trucareer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trucareer-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Celery Worker for Background Tasks
  worker:
    build:
      context: ..
      dockerfile: docker/worker/Dockerfile
    container_name: trucareer-worker
    environment:
      - APP_ENV=production
      - MONGODB_URL=mongodb://mongodb:27017
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - mongodb
      - redis
    volumes:
      - ../logs:/app/logs
      - ../data:/app/data
    networks:
      - trucareer-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    build:
      context: nginx
      dockerfile: Dockerfile
    container_name: trucareer-nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
    networks:
      - trucareer-network
    restart: unless-stopped

  # Flower for Celery Monitoring (Development)
  flower:
    image: mher/flower:2.0.1
    container_name: trucareer-flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - FLOWER_PORT=5555
    depends_on:
      - redis
    networks:
      - trucareer-network
    profiles:
      - dev

  # Prometheus for Metrics (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: trucareer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - trucareer-network
    profiles:
      - monitoring

  # Grafana for Visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: trucareer-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - trucareer-network
    profiles:
      - monitoring

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  trucareer-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16