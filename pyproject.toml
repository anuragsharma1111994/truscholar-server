[tool.poetry]
name = "truscholar"
version = "1.0.0"
description = "AI-powered RAISEC-based career counselling platform"
authors = ["TruScholar Team <team@truscholar.com>"]
maintainers = ["TruScholar Team <team@truscholar.com>"]
readme = "README.md"
homepage = "https://truscholar.com"
repository = "https://github.com/truscholar/truscholar"
documentation = "https://docs.truscholar.com"
keywords = ["career-counselling", "raisec", "ai", "assessment", "fastapi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "Topic :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
]
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"

# Web Framework
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
python-multipart = "^0.0.6"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}

# Database
motor = "^3.3.2"
redis = {extras = ["hiredis"], version = "^5.0.1"}
pymongo = "^4.6.0"

# Task Queue
celery = {extras = ["redis"], version = "^5.3.4"}
flower = "^2.0.1"
celery-types = "^0.20.0"

# AI/ML
langchain = "^0.1.0"
langchain-openai = "^0.0.2"
langchain-community = "^0.0.2"
openai = "^1.6.1"
anthropic = "^0.8.1"
google-generativeai = "^0.3.2"
tiktoken = "^0.5.2"

# Data Validation & Serialization
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
email-validator = "^2.1.0"

# HTTP & Networking
httpx = "^0.25.2"
aiohttp = "^3.9.1"
requests = "^2.31.0"

# Utilities
python-dotenv = "^1.0.0"
tenacity = "^8.2.3"
python-json-logger = "^2.0.7"
structlog = "^23.2.0"
arrow = "^1.3.0"

# Monitoring & Observability
prometheus-fastapi-instrumentator = "^6.1.0"
opentelemetry-api = "^1.21.0"
opentelemetry-sdk = "^1.21.0"
opentelemetry-instrumentation-fastapi = "^0.43b0"
sentry-sdk = {extras = ["fastapi"], version = "^1.39.1"}

# Security
cryptography = "^41.0.7"
pyjwt = "^2.8.0"

# Development Tools (moved to dev dependencies)
fakeredis = "^2.20.0"
factory-boy = "^3.3.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-timeout = "^2.2.0"
pytest-xdist = "^3.5.0"
coverage = {extras = ["toml"], version = "^7.3.2"}

# Code Quality
black = "^23.11.0"
isort = "^5.13.0"
flake8 = "^6.1.0"
flake8-docstrings = "^1.7.0"
flake8-bugbear = "^23.12.2"
flake8-comprehensions = "^3.14.0"
pylint = "^3.0.3"
mypy = "^1.7.1"
bandit = {extras = ["toml"], version = "^1.7.5"}

# Type Stubs
types-requests = "^2.31.0"
types-redis = "^4.6.0"
types-python-jose = "^3.3.4"
types-passlib = "^1.7.7"

# Development Tools
ipython = "^8.18.1"
ipdb = "^0.13.13"
rich = "^13.7.0"
pre-commit = "^3.5.0"
commitizen = "^3.13.0"

# Documentation
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.2"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

# Performance Testing
locust = "^2.17.0"

# Debugging
debugpy = "^1.8.0"

[tool.poetry.group.test.dependencies]
# Test-specific dependencies
pytest-env = "^1.1.3"
pytest-mock = "^3.12.0"
pytest-benchmark = "^4.0.0"
freezegun = "^1.3.1"
responses = "^0.24.1"
mongomock-motor = "^0.0.21"

[tool.poetry.scripts]
truscholar = "src.api.main:run"
worker = "src.workers.celery_app:worker"
scheduler = "src.workers.celery_app:beat"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# Tool Configurations

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip = ["migrations", ".venv", "build", "dist"]
known_first_party = ["src"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
pretty = true
show_error_codes = true
show_error_context = true
show_column_numbers = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--maxfail=1",
    "--tb=short",
    "--asyncio-mode=auto"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
    "*/config.py",
    "*/settings.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests", "scripts"]
severity = "medium"
confidence = "medium"
max_line_length = 120
progress = true

[tool.pylint.main]
py-version = "3.11"
extension-pkg-allow-list = ["pydantic"]
load-plugins = [
    "pylint.extensions.docparams",
    "pylint.extensions.docstyle",
]

[tool.pylint.messages_control]
max-line-length = 88
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "C0301",  # line-too-long
    "R0903",  # too-few-public-methods
    "R0801",  # duplicate-code
    "W0621",  # redefined-outer-name
    "W0212",  # protected-access
    "W0511",  # fixme
    "E1101",  # no-member (false positives with pydantic)
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "db"]

[tool.pylint.design]
max-args = 7
max-attributes = 10
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 1

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "src/__init__.py:__version__"
]
update_changelog_on_bump = true
annotated_tag = true

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "D",   # pydocstyle
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D106",  # Missing docstring in public nested class
]
fixable = ["ALL"]
unfixable = []
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "__pypackages__",
    "build",
    "dist",
    "migrations",
]

[tool.poetry.extras]
all = [
    "opentelemetry-api",
    "opentelemetry-sdk",
    "opentelemetry-instrumentation-fastapi",
    "sentry-sdk",
]